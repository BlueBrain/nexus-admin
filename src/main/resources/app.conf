# All application specific configuration should reside here
app {
  # The service description namespace
  description {
    # The name of the service
    name = "admin"
  }

  iam {
    public-iri = "http://localhost:8080/v1"
    public-iri = ${?IAM_PUBLIC_IRI}
    internal-iri = "http://localhost:8080/v1"
    internal-iri = ${?IAM_INTERNAL_IRI}
  }

  # Service instance specific settings
  instance {
    # The default interface to bind to
    interface = 127.0.0.1
    interface = ${?BIND_INTERFACE}
  }

  # Http binding settings
  http {
    # The interface to bind to
    interface = ${app.instance.interface}
    # The port to bind to
    port = 8080
    port = ${?BIND_PORT}
    # The default uri prefix
    prefix = "v1"
    prefix = ${?HTTP_PREFIX}
    # The service public uri
    public-uri = "http://"${app.http.interface}":"${app.http.port}
    public-uri = ${?PUBLIC_URI}
  }

  # Service runtime settings
  runtime {
    # Arbitrary Future completion timeout
    default-timeout = 30 seconds
  }

  # Cluster specific settings
  cluster {
    # Duration after which actors are shutdown if they have no interaction
    passivation-timeout = 2 seconds
    passivation-timeout = ${?PASSIVATION_TIMEOUT}
    # Timeout for requests to the distributed data
    replication-timeout = 5 seconds
    replication-timeout = ${?REPLICATION_TIMEOUT}
    # Total number of shards in the cluster
    shards = 30
    shards = ${?SHARDS}
    # The seeds to use for joining a cluster.  Should not contain the self address.
    # Example: 127.0.0.1:2552,127.0.0.2:2552,127.0.0.3:2552
    seeds = ${?SEED_NODES}
  }

  # Persistence specific settings
  persistence {
    journal-plugin = "cassandra-journal"
    snapshot-store-plugin = "cassandra-snapshot-store"
    query-journal-plugin = "cassandra-query-journal"
  }

  # default key value store configuration
  key-value-store {
    # the maximum duration to wait for the replicator to reply
    ask-timeout = 10 seconds
    ask-timeout = ${?KEY_VALUE_STORE_ASK_TIMEOUT}
    # the maximum duration to wait for a consistent read or write across the cluster
    consistency-timeout = 10 seconds
    consistency-timeout = ${?KEY_VALUE_STORE_CONSISTENCY_TIMEOUT}
    # retry strategy
    retry {
      # possible values are: "never", "once" and "exponential"
      strategy = "exponential"
      strategy = ${?KEY_VALUE_STORE_RETRY_STRATEGY}
      # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
      initial-delay = 100 milliseconds
      initial-delay = ${?KEY_VALUE_STORE_RETRY_INITIAL_DELAY}
      # the maximum delay applied to the retrying strategy
      max-delay = 10 minutes
      max-delay = ${?KEY_VALUE_STORE_RETRY_MAX_DELAY}
      # maximum number of retries in case of failure (applicable only for strategy "exponential")
      max-retries = 7
      max-retries = ${?KEY_VALUE_STORE_RETRY_MAX_RETRIES}
      # the exponential random factor (applicable only for strategy "exponential")
      factor = 0.2
      factor = ${?KEY_VALUE_STORE_RETRY_RANDOM_FACTOR}
      # the linear increment (applicable only for strategy "linear")
      increment = 500 milliseconds
      increment = ${?KEY_VALUE_STORE_RETRY_INCREMENT}
    }
  }

  indexing {

    # time to wait before the next batch is consumed
    batch-timeout = 40 millis
    batch-timeout = ${?INDEXING_BATCH_TIMEOUT}

    # number of events to wait before the next batch is consumed
    batch = 10
    batch = ${?INDEXING_BATCH}

    # The number of times an index function is retried
    retry {
      # the retry strategy to use; possible values are: "never", "once" and "exponential"
      strategy = "exponential"
      strategy = ${?INDEXING_RETRY_STRATEGY}
      # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
      # (applicable only for strategy "exponential")
      initial-delay = 200 milliseconds
      initial-delay = ${?INDEXING_RETRY_INITIAL_DELAY}
      # the maximum delay applied to the retrying strategy
      max-delay = 10 minutes
      max-delay = ${?INDEXING_RETRY_MAX_DELAY}
      # maximum number of retries in case of failure (applicable only for strategy "exponential")
      max-retries = 10
      max-retries = ${?INDEXING_RETRY_MAX_RETRIES}

      # the exponential random factor (applicable only for strategy "exponential")
      factor = 0.2
      factor = ${?INDEXING_RETRY_RANDOM_FACTOR}
      # the linear increment (applicable only for strategy "linear")
      increment = 500 milliseconds
      increment = ${?INDEXING_RETRY_INCREMENT}
    }
  }

  sourcing {
    # the maximum duration to wait for an aggregate to reply
    ask-timeout = 10 seconds
    ask-timeout = ${?SOURCING_ASK_TIMEOUT}
    # the journal plugin used to create event streams for arbitrary replays
    query-journal-plugin = ${app.persistence.query-journal-plugin}
    query-journal-plugin = ${?SOURCING_QUERY_JOURNAL_PLUGIN}
    # the maximum duration before a command evaluation times out
    command-evaluation-timeout = 5 seconds
    command-evaluation-timeout = ${?SOURCING_COMMAND_EVALUATION_TIMEOUT}
    # the execution context where commands are being evaluated; possible values are "akka" and "global"
    command-evaluation-execution-context = "global"
    command-evaluation-execution-context = ${?SOURCING_COMMAND_EVALUATION_EXECUTION_CONTEXT}
    # the total number of shards to allocate
    shards = 10
    shards = ${?SOURCING_SHARDS}
    # the aggregate actor passivation strategy
    passivation {
      # duration since the last received message after which the aggregate actors should shut down (0 - disabled)
      lapsed-since-last-interaction = 5 seconds
      lapsed-since-last-interaction = ${?SOURCING_LAST_INTERACTION_PASSIVATION_TIMEOUT}
      # duration since the aggregate actors' recovery after which they should shut down (0 - disabled)
      lapsed-since-recovery-completed = 0 milliseconds
      lapsed-since-recovery-completed = ${?SOURCING_RECOVERY_PASSIVATION_TIMEOUT}
    }
    retry {
      # the retry strategy to use; possible values are: "never", "once" and "exponential"
      strategy = "exponential"
      strategy = ${?SOURCING_RETRY_STRATEGY}
      # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
      # (applicable only for strategy "exponential")
      initial-delay = 200 milliseconds
      initial-delay = ${?SOURCING_RETRY_INITIAL_DELAY}
      # the maximum delay applied to the retrying strategy
      max-delay = 10 minutes
      max-delay = ${?SOURCING_RETRY_MAX_DELAY}
      # maximum number of retries in case of failure (applicable only for strategy "exponential")
      max-retries = 7
      max-retries = ${?SOURCING_RETRY_MAX_RETRIES}

      # the exponential random factor (applicable only for strategy "exponential")
      factor = 0.2
      factor = ${?SOURCING_RETRY_RANDOM_FACTOR}
      # the linear increment (applicable only for strategy "linear")
      increment = 500 milliseconds
      increment = ${?SOURCING_RETRY_INCREMENT}

    }
  }

  index {
    # the maximum duration to wait for the replicator to reply
    ask-timeout = 10 seconds
    ask-timeout = ${?INDEX_ASK_TIMEOUT}
    consistency-timeout = 10 seconds
    consistency-timeout = ${?INDEX_CONSISTENCY_TIMEOUT}

  }

  service-account {
    token = ${?SERVICE_ACCOUNT_TOKEN}
  }

  permissions {
    retry {
      # the retry strategy to use; possible values are: "never", "once" and "exponential"
      strategy = ${app.sourcing.retry.strategy}
      strategy = ${?PERMISSIONS_RETRY_STRATEGY}
      # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
      # (applicable only for strategy "exponential")
      initial-delay = ${app.sourcing.retry.initial-delay}
      initial-delay = ${?PERMISSIONS_RETRY_INITIAL_DELAY}
      # the maximum delay applied to the retrying strategy
      max-delay = ${app.sourcing.retry.max-delay}
      max-delay = ${?PERMISSIONS_RETRY_MAX_DELAY}
      # maximum number of retries in case of failure (applicable only for strategy "exponential")
      max-retries = ${app.sourcing.retry.max-retries}
      max-retries = ${?PERMISSIONS_RETRY_MAX_RETRIES}
      # the exponential random factor (applicable only for strategy "exponential")
      factor = ${app.sourcing.retry.factor}
      factor = ${?PERMISSIONS_RETRY_RANDOM_FACTOR}
      # the linear increment (applicable only for strategy "linear")
      increment = 500 milliseconds
      increment = ${?PERMISSIONS_RETRY_INCREMENT}
    }
    owner = [
      #permissions
      "acls/read",
      "acls/write",

      # admin specific permissions
      "projects/read",
      "projects/write",
      "projects/create",
      "organizations/read",
      "organizations/write",
      "organizations/create",

      # kg specific permissions
      "resources/read",
      "resources/write",
      "resolvers/write",
      "views/query",
      "views/write",
      "schemas/write",
      "files/write",
    ]
  }

  # Pagination configuration
  pagination {
    # default pagination size
    size = 10
    size = ${?DEAULT_PAGINATION_SIZE}
    # maximum pagination size
    max-size = 50
    max-size = ${?MAX_PAGINATION_SIZE}
  }

}